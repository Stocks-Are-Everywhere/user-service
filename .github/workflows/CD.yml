name: CD
on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: platypus3036/user-service:latest

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/user-service
            
            cat > .env << EOF
            DB_USERNAME=root
            DB_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_HOST=user-db
            DB_PORT=3306
            DB_NAME=${{ secrets.DB_NAME }}
            DB_URL=jdbc:mysql://user-db:3306/${{ secrets.DB_NAME }}?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            PORT=8080
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            GOOGLE_REDIRECT_URI=${{ secrets.GOOGLE_REDIRECT_URI }}
            GOOGLE_TOKEN_URI=${{ secrets.GOOGLE_TOKEN_URI }}
            GOOGLE_USER_INFO=${{ secrets.GOOGLE_USER_INFO }}
            CHROME_EXTENSION_ID=${{ secrets.CHROME_EXTENSION_ID }}
            RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}
            RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}
            RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}
            RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}
            EOF
            
            chmod 600 .env
            
            echo "Checking if .env file exists"
            ls -la .env
            echo "Checking .env file content (민감 정보 제외)"
            grep -v "PASSWORD\|SECRET\|KEY" .env
            
            docker pull platypus3036/user-service:latest
            
            cat > docker-compose.yml << EOF
            version: '3.8'
            services:
              user-db:
                image: mysql:8.0
                container_name: user-db
                restart: unless-stopped
                environment:
                  MYSQL_DATABASE: "\${DB_NAME}"
                  MYSQL_ROOT_PASSWORD: "\${DB_ROOT_PASSWORD}"
                  MYSQL_ROOT_HOST: "%"
                volumes:
                  - user-db-data:/var/lib/mysql
                deploy:
                  resources:
                    limits:
                      cpus: '1'
                      memory: 1.5G
                    reservations:
                      memory: 1G
                ports:
                  - "3306:3306"
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0
              user-service:
                image: platypus3036/user-service:latest
                container_name: user-service
                restart: unless-stopped
                depends_on:
                  - user-db
                environment:
                  SPRING_DATASOURCE_URL: "\${DB_URL}"
                  SPRING_DATASOURCE_USERNAME: "\${DB_USERNAME}"
                  SPRING_DATASOURCE_PASSWORD: "\${DB_PASSWORD}"
                  RABBITMQ_HOST: "\${RABBITMQ_HOST}"
                  RABBITMQ_PORT: "\${RABBITMQ_PORT}"
                  RABBITMQ_USERNAME: "\${RABBITMQ_USERNAME}"
                  RABBITMQ_PASSWORD: "\${RABBITMQ_PASSWORD}"
                  JWT_SECRET_KEY: "\${JWT_SECRET_KEY}"
                  GOOGLE_CLIENT_ID: "\${GOOGLE_CLIENT_ID}"
                  GOOGLE_CLIENT_SECRET: "\${GOOGLE_CLIENT_SECRET}"
                  GOOGLE_REDIRECT_URI: "\${GOOGLE_REDIRECT_URI}"
                  GOOGLE_TOKEN_URI: "\${GOOGLE_TOKEN_URI}"
                  GOOGLE_USER_INFO: "\${GOOGLE_USER_INFO}"
                  CHROME_EXTENSION_ID: "\${CHROME_EXTENSION_ID}"
                deploy:
                  resources:
                    limits:
                      cpus: '0.8'
                      memory: 1.5G
                    reservations:
                      memory: 1G
                ports:
                  - "8080:8080"
                  - "9090:9090"
            volumes:
              user-db-data:
                driver: local
            EOF
            
            echo "Checking docker-compose configuration"
            docker-compose config
            
            docker-compose down --volumes
            docker-compose up -d
            
            echo "Checking container status"
            docker ps
            
            echo "Waiting for MySQL to start..."
            sleep 30
            
            echo "Granting privileges to root user"
            docker exec user-db mysql -uroot -p"\${DB_ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
            
            echo "Restarting user-service container"
            docker-compose restart user-service
            
            echo "Final container status"
            docker ps
